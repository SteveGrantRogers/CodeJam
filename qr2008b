package qr2008b;

import java.util.Arrays;
import java.util.Scanner;

public class TrainTimetable {
	public static boolean connect(String former, String latter, int T) {
		int formerTime; // check arrival time
		int latterTime; // check departure departure time
		int turn = T;
		
		formerTime = Integer.parseInt(former.split(" ")[1].split(":")[0]+ former.split(" ")[1].split(":")[1]);
		latterTime = Integer.parseInt(latter.split(" ")[0].split(":")[0]+ latter.split(" ")[0].split(":")[1]);
		
		if (formerTime+turn<=latterTime) 
			return true;
		else
			return false;
	}
	
	
	/*public static void connect(String[] former, String[] latter) {
		
	}*/
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		int N = sc.nextInt();
		int T;
		int NA, NB;
		int acount;
		int bcount;
	
		
		String empty;
		
		for(int i=0; i<N; i++) {

			T = sc.nextInt(); //in minutes.
			NA = sc.nextInt(); //the number of trips from A to B
			NB = sc.nextInt(); //the number of trips from B to A
			acount = NA;
			bcount = NB;
			String[] Atrips = new String[NA];
			String[] Btrips = new String[NB];
	
			
			empty = sc.nextLine();
			
			for(int a=0; a<NA; a++) {
				Atrips[a] = sc.nextLine(); 
				//temp = sc.nextLine(); //10:00 23:00 //(0 2) (3 5) (6 8) (9 11)
				
				//Atrips[a] = temp.substring(0,2)+temp.substring(3,5)+temp.substring(6,8)+temp.substring(9,11);
			}
			
			Arrays.sort(Atrips);
			
			for(int b=0; b<NB; b++) {
				Btrips[b] = sc.nextLine(); //10:00 23:00 //(0 2) (3 5) (6 8) (9 11)
				//Btrips[b] = temp.substring(0,2)+temp.substring(3,5)+temp.substring(6,8)+temp.substring(9,11);
			}
			
			Arrays.sort(Btrips);
			
			String[] copiedBtrips = new String[NB];
			
			for(int x=0; x<NB; x++) {
				copiedBtrips[x] = Btrips[x];
			}
			
			//Let's create a function!
	
			for (int a=0; a<NA; a++) {
					for(int b=0; b<NB; b++) {
						if(Btrips[b]!=null) {
							if(connect(Atrips[a], Btrips[b], T)) {
								bcount--;
								Btrips[b] = null;
								break;
							}
						}
					}
			}
			
			Btrips = copiedBtrips;
			
			for (int b=0; b<NB; b++) {
				if(Btrips[b]!=null) {
					for(int a=0; a<NA; a++) {
						if(Atrips[a]!=null) {
							if(connect(Btrips[b], Atrips[a], T)) {
								acount--;
								Atrips[a] = null;
								break;
							}
						}
					}
				}
			
			}
			
			if (bcount<0)
				bcount =0;
			if(acount<0)
				acount=0;
			
			int tc = i+1;  
			System.out.println("Case #" + tc + ": " +acount + " " + bcount);
		}
	}
}

/*
 * 9:00 12:00  10:00 13:00  11:00 12:30
 * 12:02 15:00  09:00 10:30
 * 
 * 
 * sorted by departure time
 * 9:00 12:00  10:00 13:00  11:00 12:30
 * 09:00 10:30  12:02 15:00 
 * 배열 A의 각원소마다 B의 각 원소가 뒤에 올 수 있는지 검사한다. A의 arrival 시간+turnaround time 이후 가장 빨리 출발하는 B의 원소를 고른다. 
 * B가 A의 이후에 왔다면 그 원소는 null로 바꿔준다. 또 B의 arrival time+turnaround time 이후 가장 빨리 출발하는 A의 원소를 고른다. 
 * 더 이상 뒤에 오는 기차가 없을때까지 기차를 잇고난 후 A의 다음 원소를 검사한다.
 * 모든 것이 끝난 후 A와 B의 null이 아닌 원소의 갯수를 검사한다.
 *
 * 
 * sorted by arrival time
 * 9:00 12:00  11:00 12:30  10:00 13:00  
 * 09:00 10:30  12:02 15:00
 * 
 * 
 * 
 * 
*/

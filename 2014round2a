package round2;

import java.util.Scanner;
import java.util.*;
import java.util.Collections;

public class DataPacking {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		int T = sc.nextInt();
		int N, X;
		int result;
		for(int i = 0; i<T; i++) {
			result = 0;
			N = sc.nextInt(); //the number of files
			X = sc.nextInt(); //the capacity of the discs 
			Vector<Integer> S = new Vector(N);
			for(int j = 0; j<N; j++) {
				S.add(sc.nextInt());
			}
			
			Collections.sort(S);
			
			for(int j = 0; j<N; j++) {
				int sz = S.size();
				if (S.isEmpty()) {
					break;
				}
				if(S.size()==1) {
					S.removeElementAt(0);
					result++;
					break;
				}
			    try {
				if((S.elementAt(0)+S.elementAt(sz-1))<=X) {
					S.removeElementAt(sz-1);
					S.removeElementAt(0);
					result++;
				} else {
					S.removeElementAt(sz-1);
					result++;
				}
			    } catch (ArrayIndexOutOfBoundsException e) {
			    	System.out.println("Exception thrown :" + e);
			    	System.out.println("sz : " + sz);
			    	System.out.println("j : " + j);
			    	System.out.println(S.size());
			    	
			    }
			}
			
			int tc = i+1;
			System.out.println("Case #" + tc + ": " + result);
		}
	}
}

//가장 작은 원소와 가장 큰 원소를 매치시켜본다 -> 안되면 가장 큰 원소는 디스크 따로, 디스크 1추가
//그 다음으로 작은 원소와 그 다음으로 큰 원소를 매치시켜본다 -> 안되면 그 원소 역시 디스크 따로
//매치가 나온다 -> 디스크 1 추가 
//매치시킬 원소가 없다 -> 디스크 1 추가 


//가장 작은 원소와 가장 큰 원소 매치 -> 안되면 그 다음 큰 원소로 



